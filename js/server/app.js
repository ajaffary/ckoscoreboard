/*
    Code generated by ChatGPT:
    https://chatgpt.com/share/6771d56d-ed1c-8000-99e0-4a91db08f053
*/

const express = require('express');
const http = require('http');
const WebSocket = require('ws');

// Create an Express app
const app = express();

// Create an HTTP server
const server = http.createServer(app);

// Attach a WebSocket server to the HTTP server
const wss = new WebSocket.Server({ server });

// Store connected clients
const clients = new Map(); // Use a Map to associate unique client identifiers

wss.on('connection', (ws) => {
    console.log('A new client connected.');

    // Assign a unique ID to the connected client
    const clientId = `client-${Date.now()}`;
    clients.set(clientId, ws);
    ws.send(JSON.stringify({ type: 'welcome', clientId }));

    // Handle messages from clients
    ws.on('message', (data) => {
        const message = JSON.parse(data);
        console.log(`Received message: ${data}`);

        if (message.type === 'sendTo') {
            const targetClient = clients.get(message.targetId);
            if (targetClient && targetClient.readyState === WebSocket.OPEN) {
                targetClient.send(
                    JSON.stringify({
                        type: 'message',
                        from: message.senderId,
                        content: message.content,
                    })
                );
            } else {
                ws.send(JSON.stringify({ type: 'error', message: 'Target client not available' }));
            }
        }
    });

    // Handle client disconnect
    ws.on('close', () => {
        console.log(`Client ${clientId} disconnected`);
        clients.delete(clientId);
    });
});

// Express route example
app.get('/', (req, res) => {
    res.send('WebSocket server is running');
});

// Start the server
const PORT = 3000;
server.listen(PORT, () => {
    console.log(`Server running on http://localhost:${PORT}`);
});